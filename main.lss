
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000019a  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  00800060  00800060  0000022e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000240  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000542  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d4  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ee  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e6  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fd  00000000  00000000  00000eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__vector_7>
  10:	45 c0       	rjmp	.+138    	; 0x9c <__vector_8>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a5 3b       	cpi	r26, 0xB5	; 181
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	aa d0       	rcall	.+340    	; 0x194 <main>
  40:	aa c0       	rjmp	.+340    	; 0x196 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_7>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	2f 93       	push	r18
  50:	8f 93       	push	r24
  52:	9f 93       	push	r25
  54:	ef 93       	push	r30
  56:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  58:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
  5a:	9c b1       	in	r25, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  5c:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  5e:	e0 91 62 00 	lds	r30, 0x0062
  62:	ef 5f       	subi	r30, 0xFF	; 255
  64:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  66:	20 91 61 00 	lds	r18, 0x0061
  6a:	e2 17       	cp	r30, r18
  6c:	39 f0       	breq	.+14     	; 0x7c <__vector_7+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  6e:	e0 93 62 00 	sts	0x0062, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	eb 59       	subi	r30, 0x9B	; 155
  76:	ff 4f       	sbci	r31, 0xFF	; 255
  78:	90 83       	st	Z, r25
  7a:	01 c0       	rjmp	.+2      	; 0x7e <__vector_7+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  7c:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
  7e:	90 91 60 00 	lds	r25, 0x0060
  82:	98 2b       	or	r25, r24
  84:	90 93 60 00 	sts	0x0060, r25
}
  88:	ff 91       	pop	r31
  8a:	ef 91       	pop	r30
  8c:	9f 91       	pop	r25
  8e:	8f 91       	pop	r24
  90:	2f 91       	pop	r18
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <__vector_8>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	ef 93       	push	r30
  ac:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  ae:	90 91 64 00 	lds	r25, 0x0064
  b2:	80 91 63 00 	lds	r24, 0x0063
  b6:	98 17       	cp	r25, r24
  b8:	61 f0       	breq	.+24     	; 0xd2 <__vector_8+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
  ba:	e0 91 63 00 	lds	r30, 0x0063
  be:	ef 5f       	subi	r30, 0xFF	; 255
  c0:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
  c2:	e0 93 63 00 	sts	0x0063, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	eb 57       	subi	r30, 0x7B	; 123
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	80 81       	ld	r24, Z
  ce:	8c b9       	out	0x0c, r24	; 12
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <__vector_8+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
  d2:	55 98       	cbi	0x0a, 5	; 10
    }
}
  d4:	ff 91       	pop	r31
  d6:	ef 91       	pop	r30
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
  e6:	10 92 64 00 	sts	0x0064, r1
    UART_TxTail = 0;
  ea:	10 92 63 00 	sts	0x0063, r1
    UART_RxHead = 0;
  ee:	10 92 62 00 	sts	0x0062, r1
    UART_RxTail = 0;
  f2:	10 92 61 00 	sts	0x0061, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
  f6:	97 ff       	sbrs	r25, 7
  f8:	03 c0       	rjmp	.+6      	; 0x100 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
  fa:	22 e0       	ldi	r18, 0x02	; 2
  fc:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
  fe:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 100:	92 b9       	out	0x02, r25	; 2
    UBRRL = (unsigned char) baudrate;
 102:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 104:	88 e9       	ldi	r24, 0x98	; 152
 106:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    #else
    UCSRC = (3<<UCSZ0);
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	83 b9       	out	0x03, r24	; 3
 10c:	08 95       	ret

0000010e <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 10e:	90 91 62 00 	lds	r25, 0x0062
 112:	80 91 61 00 	lds	r24, 0x0061
 116:	98 17       	cp	r25, r24
 118:	81 f0       	breq	.+32     	; 0x13a <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 11a:	e0 91 61 00 	lds	r30, 0x0061
 11e:	ef 5f       	subi	r30, 0xFF	; 255
 120:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 122:	e0 93 61 00 	sts	0x0061, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	eb 59       	subi	r30, 0x9B	; 155
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
 12e:	90 91 60 00 	lds	r25, 0x0060
    UART_LastRxError = 0;
 132:	10 92 60 00 	sts	0x0060, r1
    return data;
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
 13e:	08 95       	ret

00000140 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 140:	90 91 64 00 	lds	r25, 0x0064
 144:	9f 5f       	subi	r25, 0xFF	; 255
 146:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 148:	20 91 63 00 	lds	r18, 0x0063
 14c:	92 17       	cp	r25, r18
 14e:	e1 f3       	breq	.-8      	; 0x148 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 150:	e9 2f       	mov	r30, r25
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	eb 57       	subi	r30, 0x7B	; 123
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 15a:	90 93 64 00 	sts	0x0064, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 15e:	55 9a       	sbi	0x0a, 5	; 10
 160:	08 95       	ret

00000162 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	ec 01       	movw	r28, r24
    while (*s) 
 168:	89 91       	ld	r24, Y+
 16a:	88 23       	and	r24, r24
 16c:	11 f0       	breq	.+4      	; 0x172 <uart_puts+0x10>
      uart_putc(*s++);
 16e:	e8 df       	rcall	.-48     	; 0x140 <uart_putc>
 170:	fb cf       	rjmp	.-10     	; 0x168 <uart_puts+0x6>

}/* uart_puts */
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 17e:	84 91       	lpm	r24, Z
 180:	ef 01       	movw	r28, r30
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	88 23       	and	r24, r24
 186:	19 f0       	breq	.+6      	; 0x18e <uart_puts_p+0x16>
      uart_putc(c);
 188:	db df       	rcall	.-74     	; 0x140 <uart_putc>
 18a:	fe 01       	movw	r30, r28
 18c:	f8 cf       	rjmp	.-16     	; 0x17e <uart_puts_p+0x6>

}/* uart_puts_p */
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:
volatile uint16_t data[NUMPERIODS]; // store the received pulses


//main program
int main(void)
{
 194:	ff cf       	rjmp	.-2      	; 0x194 <main>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
